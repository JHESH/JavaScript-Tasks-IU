# Работа с целыми числами

Для представления чисел (*целых и вещественных*) есть тип данных **Number**

Напишем программу для нахождения суммы двух *целых* чисел

```
"use strict";

let a, b, s;
a = 15;
b = 7;
s = a + b;
console.log(s);
```

Переменные создаются в JavaScript с помощью **let**

Напишем программу для демонстрации арифметических операций с *целыми* числами

```
"use strict";

let a = 25;
let b = 7;

let s = a + b;
let r = a - b;
let p = a * b;
let divValue = parseInt(a / b);
let modValue = parseInt(a % b);

console.log("Сумма: " + s);
console.log("Разность: " + r);
console.log("Произведение: " + p);
console.log("Целая часть от деления: " + divValue);
console.log("Остаток от деления: " + modValue);
```

Для получения *целой* части используется функция **parseInt**

Напишем программу для проверки *целых* чисел на равенство

```
"use strict";

let a = -456;
let b = -123;

if(a === b) {
    console.log("YES");
} else {
    console.log("NO");
}
```

Для строгой проверки на равество использовался **===**

Тройной знак равество при сравнении учитывает тип сравниваемых данных

# Циклы

Напишем программу для вывода чисел на отрезке

```
"use strict";

let a = 4;
let b = 9;

for(let i = a; i <= b; i++) {
    console.log("Current: " + i);
}
```

В данном примере использовался цикл **for**

Данный пример можно переписать на цикл **while**

```
"use strict";

let a = 4;
let b = 9;

let i = a;

while(i <= b) {
    console.log("Value: " + i);
    i++;
}
```

В начале каждой программы пишется конструкция

```
"use strict";
```

Она активирует строгий режим программирования

При строгом режиме программирования нельзя работать с переменной, пока она явно не объявлена через **let**

